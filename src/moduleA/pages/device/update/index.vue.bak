<template>

  <view class="search">
    <view @click="updateOTA()">升级</view>
    <view>
      mStatus:{{ mStatus }} mOtaResult:{{ mOtaResult }} mValue:{{ mValue }}
    </view>
  </view>
  <view class="search-item" v-if="scanDevices.length > 0">
    <template v-for="item in scanDevices">
      <nut-cell @click="connectDevice(item)" :title="'Blueth Name' + item.name" is-link>
        <view style="display: flex;justify-content: space-between;width: 100%;">
          <view>
            <view>Blueth Name {{ item.name }}</view>
          </view>
        </view>

      </nut-cell>
      <!-- <view class="search-item-ok">SN: {{ item.sn }}</view> -->
    </template>

  </view>

</template>

<script setup lang="ts">


import {BluetoothEventCallback, BluetoothOTAManager} from "../../../lib/bluetoothOTAManager";
import Taro from "@tarojs/taro";
import {BTAdapter, BTBean} from "../../../lib/bluetooth";
import {ref} from "vue";

import {OTAConfig, ReConnectMsg, setLogger as setOTALogger, UpgradeType} from "../../../lib/jl_lib/jl_ota_2.1.1";
import {setLogger as setRCSPLogger} from "../../../lib/jl_lib/jl_rcsp_ota_2.1.1";
import {setLogger as setAppLogger} from "../../../lib/log";
import {getLogger, setLogEnable} from "../../../lib/logger";
import {BASE_CONFIG} from "../../../../api/config";


const sysinfo = Taro.getSystemInfoSync()

const logger = getLogger()
setOTALogger(logger)
setRCSPLogger(logger)
setAppLogger(logger)
setLogEnable(true)

let globalData: {
  gbIsHandshake: boolean,
  gbIsAutoTest: boolean,
  gbTestNum: number,
  gbMtuNum: number,
  gbDevelop: boolean,
  gbEnableDebug: boolean,
  // gbServiceUUID: string,
  // gbNotifyCharacteristicUUID: string,
  // gbWriteCharacteristicUUID: string,
  bluetoothManager: BluetoothOTAManager,
} = {
  gbIsHandshake: true,
  gbIsAutoTest: false,
  gbTestNum: 0,
  gbMtuNum: 512,
  gbDevelop: true,
  gbEnableDebug: true,
  bluetoothManager: new BluetoothOTAManager(sysinfo.platform)
}

let upgradeData
const upOta = (fs, filePath, fileSize) => {
  try {
    const fd = fs.openSync({
      filePath: filePath
    })
    const uint8 = new Uint8Array(fileSize);
    fs.read({
      fd: fd,
      arrayBuffer: uint8.buffer,
      length: fileSize,
      success: _res => {
        upgradeData = uint8
        logger.logv("------------读取文件成功------------")
        fs.closeSync({fd: fd})
        startUp()
      },
      fail: _res => {
        wx.showToast({
          title: '加载失败',
          icon: 'none'
        })
        fs.closeSync({fd: fd})
      }
    })
  } catch (error) {
    wx.showToast({
      title: '文件丢失',
      icon: 'none'
    })

    fs.unlinkSync(filePath);
    logger.logv("error", error);
    return
  }
}
const isShowProgress = ref(false);
const mStatus = ref(0);
const mValue = ref(0);
const mOtaResult = ref(0);
const startUp = () => {
  /*--- 开始执行OTA升级 ---*/
  const otaConfig: OTAConfig = new OTAConfig()
  otaConfig.isSupportNewRebootWay = true
  otaConfig.updateFileData = upgradeData
  logger.logv("upgradeData size: " + upgradeData.length);
  const connectedDevices = sBluetoothManager.getConnectedDevice()
  if (connectedDevices != null && connectedDevices.length > 0) {
    const otaDev = connectedDevices[0]
    sBluetoothManager.startOTA(otaDev, otaConfig, {
      onStartOTA: () => {
        logger.logv("开始OTA升级")
        isShowProgress.value = true
        mStatus.value = 0
      },
      onNeedReconnect: (reConnectMsg: ReConnectMsg) => {
        mValue.value = 0
        mStatus.value = 2
      },
      onProgress: (type: UpgradeType, progress: number) => {
        if (type == UpgradeType.UPGRADE_TYPE_CHECK_FILE) {
          mValue.value = progress
          mStatus.value = 0
        }
        if (type == UpgradeType.UPGRADE_TYPE_FIRMWARE) {
          mValue.value = progress
          mStatus.value = 1
        }
      },
      onStopOTA: () => {
        mValue.value = 0
        mOtaResult.value = 0
        mStatus.value = 3
      },
      onCancelOTA: () => {
        mValue.value = 0
        mOtaResult.value = 1
        mStatus.value = 4
      },
      onError: (error: number, message: string) => {
        logger.logv("error", message);
        mValue.value = 0
        mOtaResult.value = 1
        mStatus.value = 4
      },
    })
  } else {
    logger.logv("设备未连接");
  }
}

const updateOTA = () => {
  Taro.downloadFile({
    url: BASE_CONFIG.baseURL + "/update.ufw", //仅为示例，并非真实的资源
    success: function (res) {
      // 只要服务器有响应数据，就会把响应内容写入文件并进入 success 回调，业务需要自行判断是否下载到了想要的内容
      if (res.statusCode === 200) {
        // res.tempFilePath
        const filePath = res.tempFilePath
        console.log("下载文件成功", res)
        const fs = Taro.getFileSystemManager()
        fs.getFileInfo({
          filePath: res.tempFilePath,
          success: function (r) {
            console.log('打开文件成功', r)
            upOta(fs, filePath, r.size)
          },
          fail: function (res) {
            console.log('打开文件失败', res)
          }
        })
      }
    },
    fail: function (res) {
      console.log("下载文件失败", res)
    }
  })
}

const connectDevice = (device: BTBean.BluetoothDevice) => {
  console.log("连接设备", device)
  sBluetoothManager.connectDevice(device)
}

const cacheIsHandshake = Taro.getStorageSync("IsHandshake")
if (cacheIsHandshake != "") {
  globalData.gbIsHandshake = cacheIsHandshake
}
const cacheIsAutoTest = Taro.getStorageSync("IsAutoTest")
if (cacheIsAutoTest != "") {
  globalData.gbIsAutoTest = cacheIsAutoTest
}
const cacheTestNum = Taro.getStorageSync("TestNum")
if (cacheTestNum != "") {
  globalData.gbTestNum = cacheTestNum
}
const cacheMtuNum = Taro.getStorageSync("MtuNum")
if (cacheMtuNum != "") {
  globalData.gbMtuNum = cacheMtuNum
}
const cacheServiceUUID = Taro.getStorageSync("ServiceUUID")

const cacheNotifyCharacteristicUUID = Taro.getStorageSync("NotifyCharacteristicUUID")

const cacheWriteCharacteristicUUID = Taro.getStorageSync("WriteCharacteristicUUID")

const configure = globalData.bluetoothManager.getConfigure()
configure.isUseAuth = globalData.gbIsHandshake
configure.changeMTU = globalData.gbMtuNum
//todo 目前未实现自动化测试OTA
configure.isAutoTestOTA = false;
configure.autoTestOTACount = 20;
if (cacheServiceUUID != "") {
  configure.serviceUUID = cacheServiceUUID
}
if (cacheNotifyCharacteristicUUID != "") {
  configure.notifyCharacteristicUUID = cacheNotifyCharacteristicUUID
}
if (cacheWriteCharacteristicUUID != "") {
  configure.writeCharacteristicUUID = cacheWriteCharacteristicUUID
}
globalData.bluetoothManager.setConfigure(configure)

let _freshing: boolean = false
let triggered: boolean = false
// const onRefresh = function () {
//   if (_freshing) return;
//   _freshing = true
//   if (!triggered) {
//     triggered = true
//   }//保证刷新状态下，triggered为true
//   sBluetoothManager.sanDevice();
//   setTimeout(() => {
//     this.setData({
//       triggered: false,//触发onRestore，关闭刷新图标
//     })
//     this._freshing = false
//   }, 1500);
// }
let filterDevName: string = 'AIBTGJ25'


const _onBluetoothAdapter = (_availableBluetooth: boolean, _btAdapterInfo ?: BTAdapter.BTAdapterInfo) => {
}

const _onLocation = (_availableLocation: boolean, _locationAdapterInfo ?: BTAdapter.LocationAdapterInfo) => {
}
let isScaning: boolean = false
const _onScanStart = () => {
  isScaning = true
}

const _onScanFailed = (_err: BTBean.BluetoothError) => {
  isScaning: false
}

const _onScanFinish = () => {
  isScaning: false
}


const scanDevices = ref<Array<BTBean.BluetoothDevice>>()
let _foundSrcDevlist = new Array()


let lastUpDateTime: number = 0
const _OnFoundDevs = (devices: BTBean.BluetoothDevice[]) => {
  const time = new Date().getTime()
  if (time - lastUpDateTime < 750) {
    return
  }
  lastUpDateTime = time
  let devicesTemp: BTBean.BluetoothDevice[];
  devicesTemp = devices.sort(function (a, b) {
    return b.RSSI - a.RSSI
  })
  _foundSrcDevlist = devicesTemp
  _filterDevName(_foundSrcDevlist)
}

const _filterDevName = (devs: BTBean.BluetoothDevice[]) => {
  const tempList = new Array()
  const connectedDevices = sBluetoothManager.getConnectedDevice();
  if (connectedDevices != null) {
    connectedDevices.forEach(element => {
      if (element.name && element.name.toLowerCase().includes(filterDevName.toLowerCase())) {
        tempList.push(element)
      }
    })
  }
  devs.forEach(e => {
    const devName = e.name?.toLowerCase()
    const isConnected = sBluetoothManager.isConnected(e.deviceId)//connectedDevices != null && connectedDevices.deviceId === e.deviceId
    if (e.RSSI <= 0 && devName && devName.includes(filterDevName.toLowerCase()) && !isConnected) {
      tempList.push(e)
    }
  })
  scanDevices.value = tempList
}
const _onDevDisconnect = (result: BTBean.BluetoothDevice) => {

  connectedDevice = null

}
const _onDevConnectFailed = (result: BTBean.BluetoothDevice) => {

  connectedDevice = null

  wx.hideLoading({
    success: () => {
      wx.showToast({
        title: '连接失败',
        icon: 'none'
      })
    },
  })
}
let connectedDevice: BTBean.BluetoothDevice | null = null;
const _onDevConnectSuccess = (device: BTBean.BluetoothDevice) => {

  connectedDevice = device

  wx.hideLoading({
    success: () => {
      wx.showToast({
        title: '连接成功',
        icon: 'none'
      })
    },
  })
}

const sBluetoothManager = globalData.bluetoothManager
const sBluetoothEventCallback = new BluetoothEventCallback();
sBluetoothEventCallback.onBluetoothAdapter = _onBluetoothAdapter
sBluetoothEventCallback.onLocation = _onLocation
sBluetoothEventCallback.onScanStart = _onScanStart
sBluetoothEventCallback.onScanFailed = _onScanFailed
sBluetoothEventCallback.onScanFinish = _onScanFinish
sBluetoothEventCallback.onFoundDev = _OnFoundDevs
sBluetoothEventCallback.onDevStatusSuccess = _onDevConnectSuccess
sBluetoothEventCallback.onDevStatusDisconnect = _onDevDisconnect
sBluetoothEventCallback.onDevStatusFailed = _onDevConnectFailed
sBluetoothManager.addBluetoothEventCallback(sBluetoothEventCallback)
// this._scanDevice()
sBluetoothManager.sanDevice();


</script>

<style lang="scss">
.nut-cell {
  background: none;
  border: 0;
  box-shadow: none;
  border-bottom: 2rpx solid #E0E0E0;
}

.search {
  &-going {
    display: flex;
    flex-direction: row;
    align-items: center;
    justify-content: center;

    &-desc {
      font-weight: 500;
      font-size: 20rpx;
      color: #4046BC;

    }
  }
}
</style>